//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/josh/Josh1Controls 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Josh1Controls1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Josh1Controls1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Josh1Controls 1"",
    ""maps"": [
        {
            ""name"": ""Josh2"",
            ""id"": ""ef972eca-79cb-48c1-ae10-62efbddf846a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""84c1e26f-10d0-470f-ba13-745361cee6cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""0a7e4026-751f-44b0-a1b4-803b64cbc00e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""2533aed9-6fa4-48bc-abf4-afea2fdd7cf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""c83afea1-c0c3-4da3-a102-4b47f59b4cfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""PassThrough"",
                    ""id"": ""edf9e99d-df30-4620-9310-23ab5152e406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""11ea751c-5259-4462-a8ef-4e7d9eea5f28"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9ea44b8b-f3ec-4596-b7e5-09c1ac014510"",
                    ""path"": ""<HID::USB gamepad>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""45ea7017-1f5e-4123-925c-5e869a4d1d02"",
                    ""path"": ""<HID::USB gamepad>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""999d4f72-1f2b-47ac-bd43-658022bd40bf"",
                    ""path"": ""<HID::USB gamepad>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7122477d-1501-41be-bf5f-b1a0b86b4a4e"",
                    ""path"": ""<HID::USB gamepad>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6b7d835-f4cf-4ab1-95b1-0adff97e5d43"",
                    ""path"": ""<HID::USB gamepad>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4173e81d-1266-46f8-a530-36b38debd9fa"",
                    ""path"": ""<HID::USB gamepad>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Josh2
        m_Josh2 = asset.FindActionMap("Josh2", throwIfNotFound: true);
        m_Josh2_Movement = m_Josh2.FindAction("Movement", throwIfNotFound: true);
        m_Josh2_Attack1 = m_Josh2.FindAction("Attack1", throwIfNotFound: true);
        m_Josh2_Attack2 = m_Josh2.FindAction("Attack2", throwIfNotFound: true);
        m_Josh2_Down = m_Josh2.FindAction("Down", throwIfNotFound: true);
        m_Josh2_Up = m_Josh2.FindAction("Up", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Josh2
    private readonly InputActionMap m_Josh2;
    private List<IJosh2Actions> m_Josh2ActionsCallbackInterfaces = new List<IJosh2Actions>();
    private readonly InputAction m_Josh2_Movement;
    private readonly InputAction m_Josh2_Attack1;
    private readonly InputAction m_Josh2_Attack2;
    private readonly InputAction m_Josh2_Down;
    private readonly InputAction m_Josh2_Up;
    public struct Josh2Actions
    {
        private @Josh1Controls1 m_Wrapper;
        public Josh2Actions(@Josh1Controls1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Josh2_Movement;
        public InputAction @Attack1 => m_Wrapper.m_Josh2_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Josh2_Attack2;
        public InputAction @Down => m_Wrapper.m_Josh2_Down;
        public InputAction @Up => m_Wrapper.m_Josh2_Up;
        public InputActionMap Get() { return m_Wrapper.m_Josh2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Josh2Actions set) { return set.Get(); }
        public void AddCallbacks(IJosh2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Josh2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Josh2ActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack1.started += instance.OnAttack1;
            @Attack1.performed += instance.OnAttack1;
            @Attack1.canceled += instance.OnAttack1;
            @Attack2.started += instance.OnAttack2;
            @Attack2.performed += instance.OnAttack2;
            @Attack2.canceled += instance.OnAttack2;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
        }

        private void UnregisterCallbacks(IJosh2Actions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack1.started -= instance.OnAttack1;
            @Attack1.performed -= instance.OnAttack1;
            @Attack1.canceled -= instance.OnAttack1;
            @Attack2.started -= instance.OnAttack2;
            @Attack2.performed -= instance.OnAttack2;
            @Attack2.canceled -= instance.OnAttack2;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
        }

        public void RemoveCallbacks(IJosh2Actions instance)
        {
            if (m_Wrapper.m_Josh2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJosh2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Josh2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Josh2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Josh2Actions @Josh2 => new Josh2Actions(this);
    public interface IJosh2Actions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
    }
}
